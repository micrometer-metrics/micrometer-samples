buildscript {
	repositories {
		maven { url 'https://repo.spring.io/milestone' }
		maven { url 'https://repo.spring.io/snapshot' }
		gradlePluginPortal()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementPlugin"
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	runtimeOnly 'org.hsqldb:hsqldb'

	implementation "io.micrometer:micrometer-tracing-bridge-${project.hasProperty("brave") ? "brave" : "otel" }"
	// Default is OTel + Zipkin. You can opt in via "wavefront" to Wavefront and "brave" for Brave
	if (project.hasProperty("wavefront")) {
		implementation "io.micrometer:micrometer-tracing-reporter-wavefront"
	} else {
		implementation 'io.zipkin.reporter2:zipkin-sender-urlconnection' // we need a way to send spans to Zipkin
	}
	if (project.hasProperty("brave")) {
		implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	} else {
		implementation "io.opentelemetry:opentelemetry-exporter-zipkin"
	}

	testImplementation project(':test-common')
	testImplementation 'io.micrometer:micrometer-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
