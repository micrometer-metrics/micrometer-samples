buildscript {
    repositories {
        gradlePluginPortal()
        if (springBootVersion.endsWith('SNAPSHOT') || springCloudVersion.endsWith('SNAPSHOT')) {
            maven { url 'https://repo.spring.io/snapshot' }
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.20'
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'org.graalvm.buildtools.native'

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.+'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Default is Brave + Zipkin, you can opt in via "-Pwavefront" to Wavefront and "-Potel" for OTel
    if (project.hasProperty('wavefront')) {
        implementation 'io.micrometer:micrometer-tracing-reporter-wavefront:latest.release'
    }
    if (project.hasProperty('otel')) {
        implementation 'io.micrometer:micrometer-tracing-bridge-otel:latest.release'
        implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    }
    else {
        implementation 'io.micrometer:micrometer-tracing-bridge-brave:latest.release'
        implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    }

    runtimeOnly 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.+')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.awaitility:awaitility'
}

graalvmNative {
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                requiredVersion = '22.3'
                vendor = JvmVendorSpec.matching('GraalVM Community')
            }
        }
    }
}
